#!/usr/bin/env python3
from pathlib import Path
import os
this_filepath = Path(os.path.abspath(__file__))
this_dirpath = this_filepath.parent
import sys
sys.path.insert(0, str(this_dirpath))
import deployutils
import shutil
import sys
import argparse

def populate_deploy_path(deploy_path):
    src_path = this_dirpath.parent

    deploy_index_filename = str(deploy_path.joinpath("index.html"))

    shutil.copy(
        src_path.joinpath("index.html"),
        deploy_index_filename
    )
    shutil.copytree(
        src_path.joinpath("js.build.out"),
        deploy_path.joinpath("js.build.out")
    )
    shutil.copytree(
        src_path.joinpath("css"),
        deploy_path.joinpath("css")
    )

    return deploy_index_filename

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("--remote-url", type=str)
    arg_parser.add_argument("--branch", type=str, default="gh-pages")
    arg_parser.add_argument("--push", action="store_true")
    args = arg_parser.parse_args()

    if args.remote_url is not None:
        remote_url = args.remote_url
    else:
        remote_url = deployutils.infer_remote_url()
        if remote_url is None:
            print("github remote could not be inferred, run the script with --remote_url <remote-url>", file=sys.stderr)
            exit(1)

    deployutils.run(
        remote_url,
        deploy_branch=args.branch,
        push=args.push,
        populate_deploy_path=populate_deploy_path
    )