#!/usr/bin/env python3
from pathlib import Path
import os
this_filepath = Path(os.path.abspath(__file__))
this_dirpath = this_filepath.parent
import sys
sys.path.insert(0, str(this_dirpath))
import deployutils
import shutil
import sys
import argparse

class TextColor:
    green = "\033[92m"
    yellow = "\033[93m"
    red = "\033[91m"
    end = "\033[0m"

def color_text(color, text):
    return f"{color}{text}{TextColor.end}"

def yellow(text):
    return color_text(TextColor.yellow, text)

def green(text):
    return color_text(TextColor.green, text)

def red(text):
    return color_text(TextColor.red, text)

def populate_deploy_path(project_path, deploy_path):
    for filename in os.listdir(deploy_path):
        if filename == ".git":
            continue
        if os.path.isdir(filename):
            shutil.rmtree(filename)
        else:
            os.remove(filename)

    deploy_index_filename = str(deploy_path.joinpath("index.html"))

    shutil.copy(
        project_path.joinpath("index.html"),
        deploy_index_filename
    )
    shutil.copytree(
        project_path.joinpath("js.build.out"),
        deploy_path.joinpath("js.build.out")
    )
    shutil.copytree(
        project_path.joinpath("css"),
        deploy_path.joinpath("css")
    )

    print(yellow(f"Preview available at:\n{deploy_index_filename}"), file=sys.stderr)

if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("--remote-url", type=str)
    arg_parser.add_argument("--branch", type=str, default="gh-pages")
    arg_parser.add_argument("--push", action="store_true")
    args = arg_parser.parse_args()

    if args.remote_url is not None:
        remote_url = args.remote_url
    else:
        remote_url = deployutils.infer_remote_url()
        if remote_url is None:
            print(red("github remote could not be inferred, run the script with --remote_url <remote-url>"), file=sys.stderr)
            exit(1)
    
    deploy_branch = args.branch
    remote = "origin"
    project_path = this_dirpath.parent
    deploy_path = project_path.joinpath("deploy.out")
    
    deployutils.git_clone(remote_url, remote, deploy_path, deploy_branch)
    populate_deploy_path(project_path, deploy_path)
    
    if args.push:
        a = input(f"Deploy to {remote_url}@{deploy_branch}? [y/_] ")
        if a != "y":
            exit(1)
        
        deployutils.git_push_deploy(deploy_path, remote, deploy_branch)